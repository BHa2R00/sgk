(load "./3.fasl")

(defun sgk ()
  (let ((srctree (f-return-srctree *file-in*))
		(outtree))
	(setq outtree (flatten-tree srctree))
  (format t "~a~%" srctree)
;  (format t "~a~%" outtree)
  (f100 outtree *file-out*)
;  (format t "~x~%" (d2r64 9.999999999999998d-4))
;  (format t "~x~%" (ldb (byte 32 0) (d2r64 9.999999999999998d-4)))
;  (format t "~f~%" (r642d (d2r64 72.0d0)))
  ))

(defun f100 (tree fo)
  (let ((lst (flatten-tree tree)) (sel 0))
	(setq lst (make-array (length lst) :initial-contents lst))
	(with-open-file (str-out fo :direction	:output
							 :if-does-not-exist :create
							 :if-exists		:supersede
							 :element-type	'(unsigned-byte 8))
	  (loop for n from 0 to (1- (array-total-size lst)) do
			(cond
			  ((stringp (aref lst n)) (f101 str-out lst n))
			  ))
)))

(defun f101 (str-out lst n)
;  (wt-dt-string5 str-out (aref lst n))
  (cond
	((string= "RT_HEADER" (aref lst n)) (progn
										  (wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_HEADER*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out #x0005)
										  (wt-u2 str-out #x001c)
										  ))
	((string= "RT_BGNLIB" (aref lst n)) (progn
										  (wt-u2 str-out *RT_BGNLIB*)
										  (wt-dt-bitarray str-out (aref lst (1+ n)) 2)
										  (wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_LIBNAME" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0014)
										  (wt-u2 str-out *RT_LIBNAME*)
										  (wt-dt-string6 str-out (aref lst (1+ n)))
										  (write-byte #x2e str-out)
										  (wt-u2 str-out #x4442)
										  (wt-u2 str-out #x0014)
										  ))
	((string= "RT_UNITS" (aref lst n)) (progn
										  (wt-u2 str-out *RT_UNITS*)
										  (wt-dt-real64 str-out (aref lst (1+ n)))
										  (wt-dt-real64 str-out (aref lst (1+ (1+ n))))
										  (wt-u2 str-out #x001c)
										  ))
	((string= "RT_ENDLIB" (aref lst n)) (progn
										  (wt-u2 str-out *RT_ENDLIB*)
										  ))
	((string= "RT_BGNSTR" (aref lst n)) (progn
										  ;(wt-u2 str-out #x001c)
										  (wt-u2 str-out *RT_BGNSTR*)
										  (wt-dt-bitarray str-out (aref lst (1+ n)) 2)
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_STRNAME" (aref lst n)) (progn
										  ;(wt-u2 str-out #x000e)
										  ;(wt-u2 str-out #x000c)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_STRNAME*)
										  (wt-dt-string5 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x0004)
										  ))
	((string= "RT_BOUNDARY" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  (wt-u2 str-out *RT_BOUNDARY*)
										  ;(wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out #x0006)
										  ))
	((string= "RT_PATH" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  (wt-u2 str-out *RT_PATH*)
										  ;(wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out #x0006)
										  ))
	((string= "RT_SREF" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_SREF*)
										  ))
	((string= "RT_AREF" (aref lst n)) (progn
										  (wt-u2 str-out *RT_AREF*)
										  ))
	((string= "RT_TEXT" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  (wt-u2 str-out *RT_TEXT*)
										  ;(wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out #x0006)
										  ))
	((string= "RT_NODE" (aref lst n)) (progn
										  (wt-u2 str-out *RT_NODE*)
										  ))
	((string= "RT_BOX" (aref lst n)) (progn
										  (wt-u2 str-out *RT_BOX*)
										  ))
	((string= "RT_ENDSTR" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_ENDSTR*)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  ;(wt-u2 str-out #x0004)
										  ;(wt-u2 str-out #x001c)
										  ))
	((string= "RT_LAYER" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_LAYER*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x0006)
										  ))
	((string= "RT_DATATYPE" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_DATATYPE*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_PATHTYPE" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_PATHTYPE*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_XY" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0024)
										  ;(wt-u2 str-out #x002c)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_XY*)
										  (wt-dt-bitarray str-out (aref lst (1+ n)) 4)
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x0004)
										  ))
	((string= "RT_ENDEL" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0004)
										  (wt-u2 str-out *RT_ENDEL*)
										  ;(wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out #x0004)
										  ))
	((string= "RT_SNAME" (aref lst n)) (progn
										  ;(wt-u2 str-out #x000c)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_SNAME*)
										  (wt-dt-string5 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_STRANS" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  ;(wt-u2 str-out (aref lst (1- n)))
										  (wt-u2 str-out *RT_STRANS*)
										  ;(wt-u4 str-out (aref lst (1+ n)))
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x000c)
										  ))
	((string= "RT_ANGLE" (aref lst n)) (progn
										  (wt-u2 str-out *RT_ANGLE*)
										  (wt-dt-real64 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x000c)
										  ))
	((string= "RT_COLROW" (aref lst n)) (progn
										  (wt-u2 str-out *RT_COLROW*)
										  (wt-dt-bitarray str-out (aref lst (1+ n)) 4)
										  ))
	((string= "RT_TEXTTYPE" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_TEXTTYPE*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_PRESENTATION" (aref lst n)) (progn
										  ;(wt-u2 str-out #x0006)
										  (wt-u2 str-out *RT_PRESENTATION*)
										  (wt-u2 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_MAG" (aref lst n)) (progn
										  ;(wt-u2 str-out #x000c)
										  (wt-u2 str-out *RT_MAG*)
										  (wt-dt-real64 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x000c)
										  ))
	((string= "RT_STRING" (aref lst n)) (progn
										  (wt-u2 str-out *RT_STRING*)
										  (wt-dt-string5 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ))
	((string= "RT_WIDTH" (aref lst n)) (progn
										  (wt-u2 str-out *RT_WIDTH*)
										  (wt-u4 str-out (aref lst (1+ n)))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x0014)
										  ))
	((string= "RT_WTF" (aref lst n)) (progn
										  ;(wt-u2 str-out (aref lst (1+ n)))
										  (if
											(> (aref lst (1+ n)) #x1000)
											;(or
											;(/= #x0000 (aref lst (1+ n)))
											;(/= #x0004 (aref lst (1+ n)))
											;(/= #x0006 (aref lst (1+ n)))
											;)
											(wt-u2 str-out #x0004)
											(wt-u2 str-out (aref lst (1+ n))))
										  ;(wt-u2 str-out (aref lst (1+ (1+ n))))
										  ;(wt-u2 str-out #x0014)
										  ))
	)
  )

(sgk)
